# @package _global_
config:
  VERBOSE: False
  LOG_FREQUENCY: 100
  TEST_ONLY: False
  TEST_MODEL: False
  SEED_VALUE: 0
  MULTI_PROCESSING_METHOD: forkserver
  HOOKS:
    PERF_STATS:
      MONITOR_PERF_STATS: True
      ROLLING_BTIME_FREQ: 313
    TENSORBOARD_SETUP:
      USE_TENSORBOARD: False
      LOG_DIR: "."
      EXPERIMENT_LOG_DIR: "tensorboard"
      FLUSH_EVERY_N_MIN: 5
      LOG_PARAMS: False
      LOG_PARAMS_GRADIENTS: False
  DATA:
    NUM_DATALOADER_WORKERS: 8
    TRAIN:
      DATA_SOURCES: [ disk_folder ]
      DATASET_NAMES: [ imagenet1k_folder ]
      DATA_PATHS: [ "./data/imagenet256/train" ]
      BATCHSIZE_PER_REPLICA: 96
      LABEL_TYPE: sample_index    # just an implementation detail. Label isn't used
      TRANSFORMS:
        - name: ImgPilToMultiCrop
          total_num_crops: 6
          size_crops: [160,  96]
          num_crops: [ 2, 4 ]
          crop_scales: [[0.14, 1], [0.05, 0.14]]
        - name: RandomHorizontalFlip
          p: 0.5
        - name: ImgPilColorDistortion
          strength: 0.5 # decreased strength just like DINO and RELICv2
        - name: ImgPilMultiCropRandomApply
          transforms: [ { "name": "ImgPilGaussianBlur", "p": 1., "radius_min": 0.1, "radius_max": 2.0 } ]
          prob: [ 1., 0.1, 0.5, 0.5, 0.5, 0.5] # change gaussian blurring
        - name: ImgPilMultiCropRandomApply
          transforms: [ { "name": "ImgPilRandomSolarize", "p": 1. } ]
          prob: [ 0., 0.3, 0., 0., 0, 0] # added solarize
        - name: ToTensor
        - name: Normalize
          mean: [ 0.485, 0.456, 0.406 ]
          std: [ 0.229, 0.224, 0.225 ]
      COLLATE_FUNCTION: multicrop_collator
      MMAP_MODE: True
      COPY_TO_LOCAL_DISK: False
      COPY_DESTINATION_DIR: /tmp/imagenet1k/
      DROP_LAST: True
  TRAINER:
    TRAIN_STEP_NAME: standard_train_step
  METERS:
    name: ""
  MODEL:
    INPUT_TYPE: "rgb"
    MULTI_RES_SPLIT_CROPS: [ [ 0, 1 ], [ 0, null ] ] # for the assignement we give large resolution while for predictor only small
    TRUNK:
      NAME: convnext
      CONVNEXT:
        DEPTH: [ 3, 3, 27, 3 ]
        DIMS: [ 96, 192, 384, 768 ] # should increase to get high dim (if not need to add: Z_DIM_OLD_TMP_NEW : [2048, 512, 8192])
        DROP_PATH_RATE: 0.0
    HEAD:
      PARAMS: [
        # the first is the teacher
        [
          [ "mlp", { "dims": [ 768, 2048, 2048 ], "use_relu": False, "use_gelu": True, "use_ln": True, "use_bn": False, "use_bias": True, "skip_last_layer_relu_bn": False,  "is_JL_init": False } ],
          [ "mlp", { "dims": [ 2048, 2048 ], "use_relu": False, "use_bn": False, "use_bias": True, "skip_last_layer_relu_bn": False } ],
        ],
        [ # that's a low rank linear layer
          [ "mlp", { "dims": [ 768, 2048 ], "use_relu": False, "use_bn": False, "use_bias": True, "skip_last_layer_relu_bn": False } ],
        ],
      ]
    SYNC_BN_CONFIG:
      CONVERT_BN_TO_SYNC_BN: True
      SYNC_BN_TYPE: pytorch
      GROUP_SIZE: -1
    AMP_PARAMS:
      USE_AMP: True
      AMP_TYPE: "pytorch"  # apex | pytorch
    CUDA_CACHE:
      CLEAR_CUDA_CACHE: True
      CLEAR_FREQ: 2000
  LOSS:
    name: dstl_issl_loss
    dstl_issl_loss:
      n_Mx: 16384  # automatically inferred from model HEAD settings
      temperature_assign: 0.7
      temperature_pred: 1
      num_crops: 2 # automatically inferred from data transforms
      crops_for_teacher: [ 0, 1 ]
      beta_pM_unif: 2.3 # 2.1
      beta_H_MlZ: 0.6 # 0.5
  OPTIMIZER:
    name: adamw
    weight_decay: 0.05 # ?
    momentum: 0.9
    nesterov: False
    num_epochs: 100
    regularize_bn: True
    regularize_bias: True
    param_schedulers:
      lr:
        auto_lr_scaling:
          auto_scale: true
          base_value: 0.0003 # by default they use 0.0005 maybe that's why you were getting nan
          base_lr_batch_size: 256
        name: cosine
        schedulers:
          - name: linear
            start_value: 0.00001
            end_value: 0.003
          - name: cosine
            start_value: 0.003
            end_value: 0.0000
        update_interval: step
        interval_scaling: [rescaled, fixed]
        lengths: [0.1, 0.9]
  DISTRIBUTED:
    BACKEND: nccl
    NUM_NODES: 2    # gives batch size of 20
    NUM_PROC_PER_NODE: 4
    INIT_METHOD: tcp
    NCCL_DEBUG: True
  MACHINE:
    DEVICE: gpu
  CHECKPOINT:
    AUTO_RESUME: True
    CHECKPOINT_FREQUENCY: 5
    CHECKPOINT_ITER_FREQUENCY: -1  # set this variable to checkpoint every few iterations

  SLURM:
    NAME: "disslv2_e100_d2048_m6_mx2048_convnextS_lr3e-4"
    MEM_GB: 128 #  4 (gpu per node) * 32
    USE_SLURM: True
    TIME_HOURS: 120
    #NUM_CPU_PER_PROC: 64 # for sphinx
    #MEM_GB: 250 # for sphinx