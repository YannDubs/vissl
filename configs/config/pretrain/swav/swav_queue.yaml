# @package _global_
config:
  VERBOSE: False
  LOG_FREQUENCY: 100
  TEST_ONLY: False
  TEST_MODEL: False
  SEED_VALUE: 0
  MULTI_PROCESSING_METHOD: forkserver
  HOOKS:
    PERF_STATS:
      MONITOR_PERF_STATS: True
      ROLLING_BTIME_FREQ: 313
    TENSORBOARD_SETUP:
      USE_TENSORBOARD: False
      LOG_DIR: "."
      EXPERIMENT_LOG_DIR: "tensorboard"
      FLUSH_EVERY_N_MIN: 5
      LOG_PARAMS: False
      LOG_PARAMS_GRADIENTS: False
  DATA:
    NUM_DATALOADER_WORKERS: 8
    TRAIN:
      DATA_SOURCES: [ disk_folder ]
      DATASET_NAMES: [ imagenet1k_folder ]
      DATA_PATHS: [ "./data/imagenet256/train" ]
      BATCHSIZE_PER_REPLICA: 96
      LABEL_TYPE: sample_index    # just an implementation detail. Label isn't used
      TRANSFORMS:
        - name: ImgPilToMultiCrop
          total_num_crops: 6
          size_crops: [ 160, 96 ]
          num_crops: [ 2, 4 ]
          crop_scales: [ [ 0.14, 1 ], [ 0.05, 0.14 ] ]  # imagenet
        - name: RandomHorizontalFlip
          p: 0.5
        - name: ImgPilColorDistortion
          strength: 1.0
        - name: ImgPilGaussianBlur
          p: 0.5
          radius_min: 0.1
          radius_max: 2.0
        - name: ToTensor
        - name: Normalize
          mean: [0.485, 0.456, 0.406]
          std: [0.229, 0.224, 0.225]
      COLLATE_FUNCTION: multicrop_collator
      MMAP_MODE: True
      COPY_TO_LOCAL_DISK: False
      COPY_DESTINATION_DIR: /tmp/imagenet1k/
      DROP_LAST: True
  TRAINER:
    TRAIN_STEP_NAME: standard_train_step
  METERS:
    name: ""
  MODEL:
    TRUNK:
      NAME: resnet
      RESNETS:
        DEPTH: 50
    HEAD:
      PARAMS: [
        ["swav_head", {"dims": [2048, 2048, 128], "use_bn": True, "num_clusters": [3000]}],
      ]
    TEMP_FROZEN_PARAMS_ITER_MAP: [
      ['module.heads.0.prototypes0.weight', 313],
    ]
    # DIFFERENCE WITH ORIGINAL IS THAT WE ARE USING PYTORCH AMP AND SYNC BN AS THIS recommended in newwer version of torch
    SYNC_BN_CONFIG:
      CONVERT_BN_TO_SYNC_BN: True
      SYNC_BN_TYPE: pytorch
      GROUP_SIZE: -1
    AMP_PARAMS:
      USE_AMP: True
      AMP_TYPE: pytorch
  LOSS:
    name: swav_loss
    swav_loss:
      temperature: 0.1
      use_double_precision: False
      normalize_last_layer: True
      num_iters: 3
      epsilon: 0.05
      crops_for_assign: [0, 1]
      queue:
        queue_length: 3840
        start_iter: 75075
  OPTIMIZER:
      name: sgd
      use_larc: True
      larc_config:
        clip: False
        trust_coefficient: 0.001
        eps: 0.00000001
      weight_decay: 0.000001
      momentum: 0.9
      nesterov: False
      num_epochs: 100
      #num_epochs: 400
      regularize_bn: True
      regularize_bias: True
      param_schedulers:
        lr:
          auto_lr_scaling:
            auto_scale: true
            base_value: 0.3
            base_lr_batch_size: 256
          name: composite
          schedulers:
            - name: linear
              start_value: 0.3
              end_value: 4.8
            - name: cosine
              start_value: 4.8
              end_value: 0.0048
          update_interval: step
          interval_scaling: [rescaled, fixed]
          lengths: [0.1, 0.9]                 # 100ep
          #lengths: [0.025, 0.975]           # 400ep
  DISTRIBUTED:
    BACKEND: nccl
    NUM_NODES: 1    # gives batch size of 20
    NUM_PROC_PER_NODE: 8
    INIT_METHOD: tcp
    NCCL_DEBUG: True
  MACHINE:
    DEVICE: gpu
  CHECKPOINT:
    AUTO_RESUME: True
    CHECKPOINT_FREQUENCY: 5
    CHECKPOINT_ITER_FREQUENCY: -1  # set this variable to checkpoint every few iterations

  SLURM:
    NAME: "swav_queue"
    MEM_GB: 128 #  4 (gpu per node) * 32
    USE_SLURM: True
    TIME_HOURS: 120